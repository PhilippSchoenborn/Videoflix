#!/usr/bin/env python3
"""
üé¨ Videoflix Backend - Automatisches Setup Script
============================================

Dieses Script pr√ºft das System und richtet das Backend automatisch ein.
Es f√ºhrt alle notwendigen Schritte aus, um das Projekt startbereit zu machen.
"""

import os
import sys
import subprocess
import time
import django
from pathlib import Path

# Farben f√ºr die Ausgabe
class Colors:
    GREEN = '\033[92m'
    RED = '\033[91m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    BOLD = '\033[1m'
    END = '\033[0m'

def print_success(message):
    print(f"{Colors.GREEN}‚úÖ {message}{Colors.END}")

def print_error(message):
    print(f"{Colors.RED}‚ùå {message}{Colors.END}")

def print_warning(message):
    print(f"{Colors.YELLOW}‚ö†Ô∏è  {message}{Colors.END}")

def print_info(message):
    print(f"{Colors.BLUE}‚ÑπÔ∏è  {message}{Colors.END}")

def print_header(message):
    print(f"\n{Colors.BOLD}{Colors.BLUE}{'='*60}{Colors.END}")
    print(f"{Colors.BOLD}{Colors.BLUE}{message}{Colors.END}")
    print(f"{Colors.BOLD}{Colors.BLUE}{'='*60}{Colors.END}\n")

def run_command(command, description, check_output=False):
    """F√ºhrt ein Kommando aus und gibt den Status zur√ºck"""
    print_info(f"F√ºhre aus: {description}")
    try:
        if check_output:
            result = subprocess.run(command, shell=True, capture_output=True, text=True)
            if result.returncode == 0:
                print_success(f"{description} - Erfolgreich")
                return True, result.stdout
            else:
                print_error(f"{description} - Fehlgeschlagen: {result.stderr}")
                return False, result.stderr
        else:
            result = subprocess.run(command, shell=True)
            if result.returncode == 0:
                print_success(f"{description} - Erfolgreich")
                return True, ""
            else:
                print_error(f"{description} - Fehlgeschlagen")
                return False, ""
    except Exception as e:
        print_error(f"{description} - Fehler: {str(e)}")
        return False, str(e)

def check_requirements():
    """Pr√ºft die Systemanforderungen"""
    print_header("üîç SYSTEMANFORDERUNGEN PR√úFEN")
    
    # Docker pr√ºfen
    success, output = run_command("docker --version", "Docker Version pr√ºfen", check_output=True)
    if not success:
        print_error("Docker ist nicht installiert oder nicht verf√ºgbar!")
        print_info("Bitte installieren Sie Docker Desktop von: https://www.docker.com/products/docker-desktop")
        return False
    
    # Docker Compose pr√ºfen
    success, output = run_command("docker-compose --version", "Docker Compose Version pr√ºfen", check_output=True)
    if not success:
        print_error("Docker Compose ist nicht installiert!")
        return False
    
    # Python pr√ºfen
    success, output = run_command("python --version", "Python Version pr√ºfen", check_output=True)
    if not success:
        print_error("Python ist nicht installiert!")
        return False
    
    print_success("Alle Systemanforderungen erf√ºllt!")
    return True

def setup_environment():
    """Richtet die Umgebung ein"""
    print_header("‚öôÔ∏è  UMGEBUNG EINRICHTEN")
    
    # .env Datei pr√ºfen
    if not os.path.exists('.env'):
        print_error(".env Datei nicht gefunden!")
        return False
    
    print_success(".env Datei gefunden")
    
    # Logs-Ordner erstellen
    os.makedirs('logs', exist_ok=True)
    print_success("Logs-Ordner erstellt")
    
    # Media-Ordner erstellen
    os.makedirs('media', exist_ok=True)
    os.makedirs('media/videos', exist_ok=True)
    os.makedirs('media/video_thumbnails', exist_ok=True)
    print_success("Media-Ordner erstellt")
    
    return True

def build_containers():
    """Baut die Docker-Container"""
    print_header("üê≥ DOCKER-CONTAINER BAUEN")
    
    # Alte Container stoppen
    run_command("docker-compose down", "Alte Container stoppen")
    
    # Container neu bauen
    success, output = run_command("docker-compose up -d --build", "Container bauen und starten")
    if not success:
        print_error("Container konnten nicht gebaut werden!")
        return False
    
    # Warten bis Container bereit sind
    print_info("Warte auf Container-Start...")
    time.sleep(10)
    
    return True

def setup_database():
    """Richtet die Datenbank ein"""
    print_header("üóÑÔ∏è  DATENBANK EINRICHTEN")
    
    # Migrations erstellen
    success, output = run_command(
        "docker-compose exec -T web python manage.py makemigrations",
        "Migrations erstellen"
    )
    if not success:
        print_warning("Migrations konnten nicht erstellt werden - m√∂glicherweise bereits vorhanden")
    
    # Migrations ausf√ºhren
    success, output = run_command(
        "docker-compose exec -T web python manage.py migrate",
        "Datenbank migrieren"
    )
    if not success:
        print_error("Datenbank-Migration fehlgeschlagen!")
        return False
    
    return True

def create_superuser():
    """Erstellt den Admin-User"""
    print_header("üë§ ADMIN-USER ERSTELLEN")
    
    # Admin-User erstellen
    success, output = run_command(
        "docker-compose exec -T web python create_admin.py",
        "Admin-User erstellen"
    )
    if not success:
        print_warning("Admin-User konnte nicht erstellt werden - m√∂glicherweise bereits vorhanden")
    
    # Admin-User verifizieren
    success, output = run_command(
        "docker-compose exec -T web python verify_admin.py",
        "Admin-User verifizieren"
    )
    if not success:
        print_warning("Admin-User konnte nicht verifiziert werden")
    
    return True

def run_tests():
    """F√ºhrt Tests aus"""
    print_header("üß™ TESTS AUSF√úHREN")
    
    success, output = run_command(
        "docker-compose exec -T web python manage.py test authentication.tests",
        "Authentication-Tests ausf√ºhren"
    )
    if not success:
        print_warning("Einige Tests sind fehlgeschlagen")
    
    return True

def print_final_info():
    """Gibt finale Informationen aus"""
    print_header("üéâ SETUP ABGESCHLOSSEN")
    
    print_success("Backend ist bereit!")
    print("")
    print(f"{Colors.BOLD}üìã WICHTIGE INFORMATIONEN:{Colors.END}")
    print(f"  ‚Ä¢ Backend URL: http://localhost:8000")
    print(f"  ‚Ä¢ Admin Panel: http://localhost:8000/admin")
    print(f"  ‚Ä¢ API Dokumentation: http://localhost:8000/api/")
    print("")
    print(f"{Colors.BOLD}üîë ADMIN-ANMELDEDATEN:{Colors.END}")
    print(f"  ‚Ä¢ E-Mail: admin@test.com")
    print(f"  ‚Ä¢ Passwort: admin123456")
    print(f"  ‚Ä¢ Username: admin")
    print("")
    print(f"{Colors.BOLD}üê≥ DOCKER-BEFEHLE:{Colors.END}")
    print(f"  ‚Ä¢ Container stoppen: docker-compose down")
    print(f"  ‚Ä¢ Container starten: docker-compose up -d")
    print(f"  ‚Ä¢ Logs anzeigen: docker-compose logs -f")
    print("")
    print(f"{Colors.BOLD}üõ†Ô∏è  N√úTZLICHE BEFEHLE:{Colors.END}")
    print(f"  ‚Ä¢ Shell √∂ffnen: docker-compose exec web python manage.py shell")
    print(f"  ‚Ä¢ Tests ausf√ºhren: docker-compose exec web python manage.py test")
    print(f"  ‚Ä¢ Neuen Admin erstellen: docker-compose exec web python create_admin.py")

def main():
    """Hauptfunktion"""
    print_header("üé¨ VIDEOFLIX BACKEND SETUP")
    print("Dieses Script richtet das Backend automatisch ein.")
    print("Bitte stellen Sie sicher, dass Docker Desktop l√§uft.")
    
    # Best√§tigung
    response = input(f"\n{Colors.YELLOW}M√∂chten Sie mit dem Setup fortfahren? (j/n): {Colors.END}")
    if response.lower() not in ['j', 'ja', 'y', 'yes']:
        print("Setup abgebrochen.")
        return
    
    try:
        # Schritte ausf√ºhren
        if not check_requirements():
            return
        
        if not setup_environment():
            return
        
        if not build_containers():
            return
        
        if not setup_database():
            return
        
        if not create_superuser():
            return
        
        run_tests()
        
        print_final_info()
        
    except KeyboardInterrupt:
        print_error("\nSetup wurde unterbrochen.")
        print_info("Container k√∂nnen mit 'docker-compose down' gestoppt werden.")
    except Exception as e:
        print_error(f"Unerwarteter Fehler: {str(e)}")

if __name__ == "__main__":
    main()
